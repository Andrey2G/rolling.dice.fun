@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.SignalR.Client
@using rolling.dice.fun.Data;
@inject NavigationManager Navigation
@inject RollingDiceService rollingDiceService
@inject ProtectedLocalStorage ProtectedLocalStore

@implements IAsyncDisposable

<PageTitle>Start</PageTitle>

<h1>Let's Rolling a dice!</h1>

Let's start adding more entropy!


<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Put your entropy data here:
    </label>
</div>
<div>
<textarea @bind="messageInput" rows=10 cols=50 />
</div>
<div>
<button @onclick="SendEntropy" disabled="@(!IsConnected)">Add my entropy!</button>
</div>
<div>
    <button @onclick="StopTheCount" disabled="@(!IsStoppedCountEnabled)">Stop the COUNT</button>
</div>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string userInput = "";
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var allMessages = await rollingDiceService.GetEntropy();
        messages = allMessages.Select(m => PrepareMessage(m.user, m.entropy)).ToList();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/rollingdicehub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add(PrepareMessage(user, message));
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On("StoppingTheCount", () =>
        {
            InvokeAsync(UpdateStopTheCountState);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        var result = await ProtectedLocalStore.GetAsync<string>("username");
        if (result.Success)
            userInput =  result.Value ?? rollingDiceService.GenerateUsername();
        else userInput = rollingDiceService.GenerateUsername();

        var stoppedResult = await ProtectedLocalStore.GetAsync<bool>("stopped");
        if (stoppedResult.Success)
            disableSendEntropy = stoppedResult.Value;
        else disableSendEntropy = false;

        if (userInput == "andrey") IsStoppedCountEnabled = true;

    }

    private async Task UpdateStopTheCountState()
    {
        disableSendEntropy = true;
        await ProtectedLocalStore.SetAsync("stopped", true);
    }

    private async Task UpdateState(string username)
    {
        await ProtectedLocalStore.SetAsync("username", username);
    }

    string PrepareMessage(string user, string message) => $"{user}: {message}";

    private async Task SendEntropy()
    {
        if (hubConnection is not null)
        {
            await UpdateState(userInput);
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = "";
            StateHasChanged();
        }
    }

    private async Task StopTheCount()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StopTheCount");
            disableSendEntropy = true;
            StateHasChanged();
        }
    }

    bool disableSendEntropy = false;
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected && !disableSendEntropy;

    public bool IsStoppedCountEnabled=false;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
