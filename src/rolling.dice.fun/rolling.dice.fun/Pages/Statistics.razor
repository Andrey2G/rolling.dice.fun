@page "/stats"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.SignalR.Client
@using rolling.dice.fun.Data;
@inject NavigationManager Navigation
@inject RollingDiceService rollingDiceService
@inject ProtectedLocalStorage ProtectedLocalStore



<PageTitle>Statistics</PageTitle>

<h1>Statistics</h1>

<p role="status">Total Entropy Size: @totalEntropySize</p>
<p role="status">You Entropy Size: @userEntropySize</p>
<p role="status">You Entropy: @userEntropyPrc %</p>
<br/>
<h1 style="background-color:black; color:red;">Rolling Dice RESULT: @rollingDiceResult</h1>

@code {
    private HubConnection? hubConnection;
    private int totalEntropySize = 0;
    private int userEntropySize = 0;
    private int userEntropyPrc = 0;
    private int rollingDiceResult = 0;

    protected override async Task OnInitializedAsync()
    {
        //start SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/rollingdicehub"))
            .Build();

        hubConnection.On<int, int, int>("UpdateStatistics", (totalSize, userSize, userPrc) =>
        {
            SetStats(totalSize, userSize, userPrc);
        });

        hubConnection.On<int>("RollingDiceResult", (result) =>
       {
           rollingDiceResult = result;
           InvokeAsync(StateHasChanged);
       });

        await hubConnection.StartAsync();

        //load stats
        try
        {
            string username = "";
            var varName = RollingDiceService.PrepareStateName("username");
            if (!string.IsNullOrEmpty(varName))
            {
                var result = await ProtectedLocalStore.GetAsync<string>(varName);
                if (result.Success)
                    username = result.Value ?? rollingDiceService.GenerateUsername();
                else username = rollingDiceService.GenerateUsername();

            }
            else username = rollingDiceService.GenerateUsername();
            if (!string.IsNullOrEmpty(hubConnection.ConnectionId))
            {
                rollingDiceService.UpdateUser(hubConnection.ConnectionId, username);
                var stats = rollingDiceService.GetUserStats(username);
                SetStats(stats.TotalSize, stats.UserSize, stats.UserPrc);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
    }

    /// <summary>
    /// set stats
    /// </summary>
    /// <param name="totalSize"></param>
    /// <param name="userSize"></param>
    /// <param name="userPrc"></param>
    void SetStats(int totalSize, int userSize, int userPrc)
    {
        totalEntropySize = totalSize;
        userEntropySize = userSize;
        userEntropyPrc = userPrc;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// disapose SignalR connection when the page is closing
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
