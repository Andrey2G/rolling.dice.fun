@page "/stats"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.SignalR.Client
@using rolling.dice.fun.Data;
@inject NavigationManager Navigation
@inject RollingDiceService rollingDiceService
@inject ProtectedLocalStorage ProtectedLocalStore


<PageTitle>Statistics</PageTitle>

<h1>Statistics</h1>

<p role="status">Total Entropy Size: @totalEntropySize</p>
<p role="status">You Entropy Size: @userEntropySize</p>
<p role="status">You Entropy %: @userEntropyPrc</p>
<br/>
<p role="status">Rolling Dice RESULT: @rollingDiceResult</p>

@code {
    private HubConnection? hubConnection;
    private int totalEntropySize = 0;
    private int userEntropySize = 0;
    private int userEntropyPrc = 0;
    private int rollingDiceResult = 0;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/rollingdicehub"))
            .Build();

        hubConnection.On<int, int, int>("UpdateStatistics", (totalSize, userSize, userPrc) =>
        {
            SetStats(totalSize, userSize, userPrc);
        });

        hubConnection.On<int>("StopTheCount", (result) =>
       {
           rollingDiceResult = result;
           InvokeAsync(StateHasChanged);
       });

        await hubConnection.StartAsync();

        string username = "";
        var result = await ProtectedLocalStore.GetAsync<string>("username");
        if (result.Success)
            username = result.Value ?? rollingDiceService.GenerateUsername();
        else username = rollingDiceService.GenerateUsername();
        var stats = rollingDiceService.GetUserStats(username);
        SetStats(stats.TotalSize, stats.UserSize, stats.UserPrc);
    }

    void SetStats(int totalSize, int userSize, int userPrc)
    {
        totalEntropySize = totalSize;
        userEntropySize = userSize;
        userEntropyPrc = userPrc;
        InvokeAsync(StateHasChanged);
    }

}
